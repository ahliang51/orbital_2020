{"ast":null,"code":"import \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/tooltip/style\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/Users/lundypang/OneDrive/Self-Learning shit/orbital_2020/web-frontend/src/components/Home/Profile/AccountBalance/AccountBalance.js\";\nimport React, { Component } from 'react';\nimport './AccountBalance.scss';\nimport CustomModal from '../../../../UI/Modal/Modal';\nimport { CardElement } from '@stripe/react-stripe-js';\nimport * as globalActionTypes from '../../../../store/actions/globalActions';\nimport * as userActionTypes from '../../../../store/actions/userActions';\nimport { connect } from \"react-redux\";\nimport { backendUrl } from '../../../../global-variables';\nimport axios from 'axios';\nconst {\n  Title\n} = _Typography;\nconst sampleCreditCard = \"Credit Card Number: 4242 4242 4242 4242\";\n\nclass AccountBalance extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      topUpModalVisible: false,\n      disabledButtons: false,\n      defaultAmount: 1,\n      amount: 1\n    };\n\n    this.showTopUpModal = () => {\n      this.setState({\n        topUpModalVisible: true\n      });\n    };\n\n    this.handleTopUpModalOk = () => {\n      this.setState({\n        topUpModalVisible: false\n      });\n    };\n\n    this.handleTopUpModalCancel = () => {\n      this.setState({\n        topUpModalVisible: false\n      });\n    };\n\n    this.onAmountChange = value => {\n      this.setState({ ...this.state,\n        amount: value\n      });\n      console.log(this.state.amount);\n    };\n\n    this.handleSubmit = async event => {\n      // Block native form submission.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not loaded yet. Make sure to disable\n        // form submission until Stripe.js has loaded.\n        return;\n      } // Get a reference to a mounted CardElement. Elements knows how\n      // to find your CardElement because there can only ever be one of\n      // each type of element.\n\n\n      const cardElement = elements.getElement(CardElement);\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement\n      });\n\n      if (error) {\n        _notification.error({\n          message: 'Error',\n          description: error.message,\n          placement: 'bottomRight'\n        });\n\n        console.log('[error]', error);\n      } else {\n        console.log('[PaymentMethod]', paymentMethod);\n        this.setState({ ...this.state,\n          disabledButtons: true\n        });\n        const response = await axios.post(backendUrl + '/stripe/generate-intent', {\n          email: \"\",\n          amount: this.state.amount\n        });\n        const result = await stripe.confirmCardPayment(response.data.clientSecret, {\n          payment_method: {\n            card: elements.getElement(CardElement)\n          }\n        });\n\n        if (result.error) {\n          console.log(result.error); // Show error to your customer (e.g., insufficient funds)\n\n          console.log(result.error.message);\n\n          _notification.error({\n            message: 'Error',\n            description: result.error.message,\n            placement: 'bottomRight'\n          });\n        } else {\n          // The payment has been processed!\n          console.log(result);\n\n          if (result.paymentIntent.status === 'succeeded') {\n            //result.paymentIntent.amount\n            const response = await axios.post(backendUrl + '/user/update-balance', {\n              topUpAmount: result.paymentIntent.amount\n            });\n\n            if (response.data.success) {\n              _notification.success({\n                message: 'Success',\n                description: \"You have successfully topped up!\",\n                placement: 'bottomRight'\n              });\n\n              this.props.updateBalance(response.data.user);\n            }\n          }\n        }\n\n        this.setState({ ...this.state,\n          disabledButtons: false\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"account-balance\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Row, {\n      align: \"middle\",\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, \"Account Balance\")), /*#__PURE__*/React.createElement(_Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(_Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      span: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(_Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      level: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, \"SGD $\", this.props.user ? this.props.user.accountBalance : null))), /*#__PURE__*/React.createElement(_Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(_Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      span: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(_Tooltip, {\n      placement: \"bottom\",\n      title: \"Sample Credit Card: 4242 4242 4242 4242\",\n      arrowPointAtCenter: \"true\",\n      mouseEnterDelay: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      span: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.showTopUpModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 39\n      }\n    }, \"Top Up\"))), /*#__PURE__*/React.createElement(_Col, {\n      span: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(_Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CustomModal, {\n      visible: this.state.topUpModalVisible,\n      handleOk: this.handleTopUpModalOk,\n      handleCancel: this.handleTopUpModalCancel,\n      title: \"Top Up\",\n      formName: \"top-up-form\",\n      disabledOk: this.state.disabledButtons,\n      disabledCancel: this.state.disabledButtons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"top-up-form\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Row, {\n      align: \"middle\",\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      span: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }, \" Amount to be top up :\"), /*#__PURE__*/React.createElement(_Col, {\n      span: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(_InputNumber, {\n      style: {\n        width: '100%'\n      },\n      min: this.state.defaultAmount,\n      defaultValue: this.state.defaultAmount,\n      formatter: value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n      parser: value => value.replace(/\\$\\s?|(,*)/g, ''),\n      onChange: this.onAmountChange,\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(_Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CardElement, {\n      options: {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#424770',\n            '::placeholder': {\n              color: '#aab7c4'\n            }\n          },\n          invalid: {\n            color: '#9e2146'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    user: state.user.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleLoading: () => {\n      dispatch({\n        type: globalActionTypes.TOGGLE_LOADING\n      });\n    },\n    updateBalance: user => {\n      dispatch({\n        type: userActionTypes.UPDATE_USER_DETAILS,\n        payload: user\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountBalance);","map":{"version":3,"sources":["/Users/lundypang/OneDrive/Self-Learning shit/orbital_2020/web-frontend/src/components/Home/Profile/AccountBalance/AccountBalance.js"],"names":["React","Component","CustomModal","CardElement","globalActionTypes","userActionTypes","connect","backendUrl","axios","Title","sampleCreditCard","AccountBalance","state","topUpModalVisible","disabledButtons","defaultAmount","amount","showTopUpModal","setState","handleTopUpModalOk","handleTopUpModalCancel","onAmountChange","value","console","log","handleSubmit","event","preventDefault","stripe","elements","props","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","message","description","placement","response","post","email","result","confirmCardPayment","data","clientSecret","payment_method","paymentIntent","status","topUpAmount","success","updateBalance","user","render","accountBalance","width","replace","style","base","fontSize","color","invalid","mapStateToProps","auth","mapDispatchToProps","dispatch","toggleLoading","TOGGLE_LOADING","UPDATE_USER_DETAILS","payload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Divider, Button, Typography, notification, Tooltip, InputNumber } from 'antd';\nimport './AccountBalance.scss'\nimport CustomModal from '../../../../UI/Modal/Modal';\nimport { CardElement } from '@stripe/react-stripe-js';\nimport * as globalActionTypes from '../../../../store/actions/globalActions'\nimport * as userActionTypes from '../../../../store/actions/userActions'\nimport { connect } from \"react-redux\";\nimport { backendUrl } from '../../../../global-variables';\nimport axios from 'axios';\n\nconst { Title } = Typography;\n\nconst sampleCreditCard = \"Credit Card Number: 4242 4242 4242 4242\";\n\nclass AccountBalance extends Component {\n\n    state = {\n        topUpModalVisible: false,\n        disabledButtons: false,\n        defaultAmount: 1,\n        amount: 1\n    }\n\n    showTopUpModal = () => {\n        this.setState({\n            topUpModalVisible: true,\n        });\n\n    }\n\n    handleTopUpModalOk = () => {\n        this.setState({\n            topUpModalVisible: false,\n        });\n    }\n\n    handleTopUpModalCancel = () => {\n        this.setState({\n            topUpModalVisible: false,\n        });\n    }\n\n    onAmountChange = (value) => {\n        this.setState({\n            ...this.state,\n            amount: value\n        })\n        console.log(this.state.amount)\n    }\n\n    handleSubmit = async (event) => {\n        // Block native form submission.\n        event.preventDefault();\n\n        const { stripe, elements } = this.props;\n\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        }\n\n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardElement);\n\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\n            type: 'card',\n            card: cardElement,\n        });\n\n        if (error) {\n            notification.error({\n                message: 'Error',\n                description: error.message,\n                placement: 'bottomRight'\n            });\n            console.log('[error]', error);\n        } else {\n            console.log('[PaymentMethod]', paymentMethod);\n            this.setState({\n                ...this.state,\n                disabledButtons: true\n            })\n\n            const response = await axios.post(backendUrl + '/stripe/generate-intent', {\n                email: \"\",\n                amount: this.state.amount\n            })\n\n            const result = await stripe.confirmCardPayment(response.data.clientSecret, {\n                payment_method: {\n                    card: elements.getElement(CardElement),\n                }\n            });\n\n            if (result.error) {\n                console.log(result.error)\n                // Show error to your customer (e.g., insufficient funds)\n                console.log(result.error.message);\n                notification.error({\n                    message: 'Error',\n                    description: result.error.message,\n                    placement: 'bottomRight'\n                });\n            } else {\n                // The payment has been processed!\n                console.log(result)\n\n                if (result.paymentIntent.status === 'succeeded') {\n\n                    //result.paymentIntent.amount\n                    const response = await axios.post(backendUrl + '/user/update-balance', {\n                        topUpAmount: result.paymentIntent.amount\n                    })\n\n                    if (response.data.success) {\n                        notification.success({\n                            message: 'Success',\n                            description: \"You have successfully topped up!\",\n                            placement: 'bottomRight'\n                        });\n\n                        this.props.updateBalance(response.data.user)\n                    }\n                }\n            }\n\n\n            this.setState({\n                ...this.state,\n                disabledButtons: false\n            })\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"account-balance\">\n                <Row align=\"middle\" justify=\"center\">\n                    <div className=\"header\">\n                        Account Balance\n                 </div>\n                </Row>\n                <Divider />\n                <Row >\n                    <Col span={2}></Col>\n                    <Col>\n                        <Title level={3}>SGD ${this.props.user ? this.props.user.accountBalance : null}</Title>\n                    </Col>\n                </Row>\n                <Divider />\n                <Row>\n                    <Col span={2}></Col>\n                    <Tooltip placement=\"bottom\" title=\"Sample Credit Card: 4242 4242 4242 4242\" arrowPointAtCenter=\"true\" mouseEnterDelay=\"0\">\n                        <Col span={4}><Button type=\"primary\" onClick={this.showTopUpModal} >Top Up</Button></Col>\n                    </Tooltip>\n                    <Col span={4}></Col>\n                </Row>\n                <Divider />\n                <CustomModal visible={this.state.topUpModalVisible}\n                    handleOk={this.handleTopUpModalOk}\n                    handleCancel={this.handleTopUpModalCancel}\n                    title=\"Top Up\"\n                    formName=\"top-up-form\"\n                    disabledOk={this.state.disabledButtons}\n                    disabledCancel={this.state.disabledButtons}\n                >\n\n                    <form id=\"top-up-form\" onSubmit={this.handleSubmit}>\n                        <Row align=\"middle\" justify=\"center\">\n                            <Col span={12}> Amount to be top up :</Col>\n                            <Col span={12}>\n                                <InputNumber style={{ width: '100%' }}\n                                    min={this.state.defaultAmount}\n                                    defaultValue={this.state.defaultAmount}\n                                    formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                                    onChange={this.onAmountChange}\n                                    size=\"large\"\n                                />\n                            </Col>\n                        </Row>\n                        <Divider />\n                        <CardElement\n                            options={{\n                                style: {\n                                    base: {\n                                        fontSize: '16px',\n                                        color: '#424770',\n                                        '::placeholder': {\n                                            color: '#aab7c4',\n                                        },\n                                    },\n                                    invalid: {\n                                        color: '#9e2146',\n                                    },\n                                },\n                            }}\n                        />\n                    </form>\n                </CustomModal>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        auth: state.auth,\n        user: state.user.user\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        toggleLoading: () => { dispatch({ type: globalActionTypes.TOGGLE_LOADING }) },\n        updateBalance: (user) => { dispatch({ type: userActionTypes.UPDATE_USER_DETAILS, payload: user }) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountBalance);"]},"metadata":{},"sourceType":"module"}